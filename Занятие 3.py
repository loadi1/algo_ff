'''
Улучшенные алгоритмы сортировки.
Знаем выбор, вставку и обмен

Шелл 1959 год
'''


# Сортировка Шелла со вставками
def Shell_vstavka(a):
    '''
    Увеличим искусственно массив, чтобы не так часто вылетать за размерность (зону вылета)
    a[h_0, ..., 0, ... N-1]
    h_0 = 9 > h_1 = 5 > h_2 = 3 > h_3 = 1. h_t = 3
    По Кнутту:
    h_{k-1} = 3h_k + 1
    h_{k-1} = 2h_k + 1
    t = целая часть(log_2 N - 1)
    '''
    h = [9, 5, 3, 1]
    t = len(h)
    N = len(a)
    a = (-1) * h + a
    print(a)
    for m in range(0, t):
        k = h[m]
        s = -k
        for i in range(k + 1, N):
            x = a[i]
            j = i = k
            if s == 0:
                s = -k + 1
                a[s] = x  # поставили барьер в области переполнения

                while x < a[j]:
                    a[j + k] = a[j]
                    j -= k
                    a[j + k] = x
    return a


a = [5, 6, 7, 3, 10, 5, 8, 1, 14, 48, 5]
print(Shell_vstavka(a))


def gpt_shall(arr):
    n = len(arr)
    gap = n // 2  # Инициализация шага

    while gap > 0:
        for i in range(gap, n):
            temp = arr[i]  # Сохраняем текущий элемент
            j = i

            # Сдвигаем элементы на расстоянии gap
            while j >= gap and arr[j - gap] > temp:
                arr[j] = arr[j - gap]
                j -= gap

            arr[j] = temp  # Вставляем сохраненный элемент в правильную позицию

        gap //= 2  # Уменьшаем шаг в два раза


arr = [64, 34, 25, 12, 22, 11, 90]
gpt_shall(a)

print(a)

# Турнирная сортировка (heap sort)
'''
44, 52, 12, 42, 94, 18, 6, 67
44, 12, 18, 6
12, 6
6
вычёркиваем победителя и продвигаем из верхнего слоя его соперника
Пирамида - организация массива, в которой для всех элементов от [h_l, h_r], если для них выполняется соотношение
для любого i h_i <= h_2i и h_i <= h_{2i+1}
начинаем с середны, 
'''
def heap(a):
    N = len(a)
    def seap(a, L, R):
        i = L
        j = L*2
        x = a[i]
        if (i<R and a[j+1] < a[j]):
            j += 1
            while j<= R and a[j]<x:
                a[i] = a[j]
                i = j
                j *= 2
                if j< R and a[j+1] < a[j]:
                    j+=1
        a[i] = x
    for L in range(N/2, 1, -1):
        seap

# Сортировка Шелла с пузырьком (ёж)

# расчёстка (ёж) с пузырьком

"""
1) Н. Вирт
2) Кормен
3) Д. Кнут
4) Ахо, Хопрофт
5) Седжвик
6) Бабенко, Левин
"""


# Поиск
# Сортировка
# Динамические структуры данных


# Дихотомия, в отсортированном массиве делим пополам для поиска
def dich(a, x):
    l = 0
    r = len(a) - 1
    while l <= r:
        m = (l + r) // 2
        if a[m] < x:
            l = m + 1
        elif a[m] > x:
            r = m - 1
        else:
            return m
    return False


# Найти подстроку s в строке t. Алгоритм Рабина-Карпа
# Считаем сумму байтов подстроки и в основной строки

# Алгоритм Кнута-Морриса_Пратта
def knut(t, s, D):
    N = len(t)
    M = len(s)
    i = 0
    j = 0
    while (j < M and i < N):
        while (j >= 0 and t[i] != s[j]):
            j = D[j]
        j += 1
        i += 1

    j = 0
    k = -1
    D[0] = [-1]
    while j < M - 1:
        while k >= 0 and s[j] != s[k]:
            k = D[k]
        j += 1
        k += 1
        if s[j] == s[k]:
            D[j] = D[k]
        else:
            D[j] = k


# Бойер-Мур
def boer_mur(s, t, D):
    N = len(t)
    M = len(s)

    for j in range(M):
        D[s[j]] = M - j - 1

    i = j = M
    while (j > 0 and i < N):
        j = M
        k = i
        while (j > 0 and t[k - 1] == s[j - 1]):
            k -= 1
            j -= 1
    i += D[t[i - 1]]


# Для самоповторов
# АБРАКАДАБРА
# Cуффикс: - А РА БРА АБРА ДАБРА
# Сдвиг: 1 3 7 7 7 11

# ДЗ Грубая сила и Бойер Мур естественный текст 2 графика производительность от длины текста при фиксированной строке

##############################

# Смотрим как сравнивать близость слов
# 1. Составить вектора из символов по их коду и смотрим на угол между ними
# 2. Левенштейн: сколько нужно раз отредактировать текст, чтобы строки совпали (операции редактирования: добавить символ, удалить, изменить)
# В нашей задаче нужно будет поварировать веса операций редактирования

# Составим матрицу из всех префиксов строки
'''
-     | -      |к      | ко    | кот
-     |  0     |  1ins | 2ins  | 3ins          
п     |  del   |       |       |   
по    | 2del   |       |       |  
пос   |  3del  |       |       | 
пост  |  4del  |       |       |         

w_(ij) = min(a, b, c)

a = { w_(i-1, j-1)         если    s_i == t_j
    { w_(o-1, j-1) + sub   иначе   
b = w_(i-1, j) + del
c = w_(i, j-1) + ins
'''



